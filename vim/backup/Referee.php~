<?php
include('Card.php');
class Referee {
    function has_four_cards_rank($rank, $cards)
    {
        #print_r($cards);
        $cntr = 0;
        foreach($cards as $card) {
            if($card->rank == $rank)
            {
                $cntr++;
            }
        }
        if($cntr == 4) {
            #print_r($card);
            #TODO del this 
            echo "has_four_cards_rank ".$rank."\n";
            return True;
        } else {
            return False;
        }
    } # has_four_cards_rank()


    function has_dragon_seq($cards){
        # Sanh rong
        for($i = 1; $i <= 13; $i++)
            $three_to_ace[$i] = False;

        foreach($cards as $card){
            $three_to_ace[$card->rank] = True;
        }

        foreach($three_to_ace as $in_hand){
            if(!$in_hand)
                return False;
        }
        #TODO del this
        echo "has_dragon_seq\n";
        return True;
    } # has_dragon_seq

    function get_pair_counters($cards)
    {
        for($i = 1 ; $i <= 13; $i++)
            $rank_cntrs[$i] = 0;

        foreach($cards as $card){
            $rank_cntrs[$card->rank]++;
        }
        return $rank_cntrs;
    }


    function has_six_pairs($cards){
        #TODO current card is from 1->13, this maybe change 3->15?
        $rank_cntrs = $this->get_pair_counters($cards);
        $sum = 0;

        # Calculate number of pairs
        foreach($rank_cntrs as $cntr) {
            $sum += floor($cntr / 2);
        }

        if ($sum >= 6) # TODO in real, this should be = 6 only
        {
            echo "has_six_pairs\n";
            return True;
        }
        else
        {
            return False;
        }
    } # has_six_pairs


    function count_pairs($cards){
        $cntrs = $this->get_pair_counters($cards);
        $pairs = array();
        # ko tinh doi 2, 3, A
        for($rank = 3; $rank <= count($cntrs); $rank++){
            if ($cntrs[$rank] >= 2) {
                $pairs[] = $rank;
            }
        }
        return $pairs;
    }

    function has_three_consecutive_pairs_start_with_3s($cards) {
        $pairs_in_cards = $this->count_pairs($cards);
        if (count($pairs_in_cards) > 3) {
            $has_3s = False;
            foreach($cards as $card){
                if($card->rank == 3 && $card->suit == 0){
                    $has_3s = True;
                }
            }

            if($has_3s) {
                sort($pairs_in_cards);
                $counter = 0;
                $lastpair = 0;
                $has_pair_of_3 = False;
                foreach($pairs_in_cards as $pair){
                    if($pair == 3) {
                        $has_pair_of_3 = True;
                    }

                    if($lastpair + 1 == $pair)
                    {
                        $counter++;
                    }
                    else
                    { 
                        $counter = 1;
                    }
                    $lastpair = $pair;

                    if($counter >= 3 && $has_3s && $has_pair_of_3){
                        echo "has_three_consecutive_pairs_start_with_3s ";
                        return True;
                    }
                }
            } 
        }
        return False;
    } # has_three_consecutive_pairs_start_with_3s

    function has_five_consecutive_pairs($cards){
        # 5 do^i tho^ng 3->k, tu ko tinh la 2 doi
        # TODO Retest
        $pairs = $this->count_pairs($cards);

        if (count($pairs) < 5) {
            return False;
        } else {
            sort($pairs);
            $counter = 0;
            $lastpair = 0;
            foreach($pairs as $pair){
                if($lastpair + 1 == $pair)
                {
                    $counter++;
                }
                else
                { 
                    $counter = 1;
                }
                $lastpair = $pair;

                if($counter == 5){
                    echo "has_five_consecutive_pairs ";
                    return True;
                }
            }
            return False;
        }
    } # has_five_consecutive_pairs()


    function is_win_from_start($cards){
        if(
            $this->has_three_consecutive_pairs_start_with_3s($cards) ||
            $this->has_five_consecutive_pairs($cards) ||
            $this->has_dragon_seq($cards) ||
            $this->has_six_pairs($cards) ||
            $this->has_four_cards_rank(2, $cards) || 
            $this->has_four_cards_rank(3, $cards)
        )
        {
            echo "Win";
            return true;
        }
        else 
        {
            echo "not win";
            return False;
        }

    } # is_win_from_start()

    function get_tien_len_rank($card){
        # A will be biggest
        return ($card->rank + 11) % 13;
    }

    function is_red_card($card) {
        if($card->suit >= 2) {
            return True;
        }
        return False;
    }

    function is_same_color($card1, $card2) {
        if($card1->suit < 2 && $card2->suit < 2 ||
            $card1->suit >= 2 && $card2->suit >= 2) {
            return True;
        } else {
            return False;
        }
    }

    function is_real_pair($card1, $card2) {
        if($card1->rank == $card2->rank) {
            if($this->is_same_color($card1, $card2)) {
                return True;
            }
        }
        return False;
    }

    function check_valid_for_pairs($new_cards, $last_cards) {
        # TODO when end a turn and changed to new suit
        if($new_cards[0]->rank != 2) {
            if(is_real_pair($new_cards[0], $new_cards[1])){
                if(is_red_card($new_cards[0]) == is_red_card($last_cards[0])) { 
                    $newcrank = $this->get_tien_len_rank($new_cards[0]);
                    $lastcrank = $this->get_tien_len_rank($last_cards[0]);
                        if($newcrank > $lastcrank) {
                            return True;
                        }
                }
            }
        } else {
            assert($new_cards[0]->rank == 2);
            if($last_cards[0]->rank != 2) {
                return True;
            } else {
                assert($last_cards[0]->rank == 2);
                #TODO check logic with two pair of 2
                return True;
            }
        }
        return False;
    } # check_valid_for_pairs


    function check_valid_for_singles($new_cards, $last_cards) {
        $newcard = $new_cards[0];
        $lastcard = $last_cards[0];

        if($newcard->rank != 2) {
            if ($newcard->suit == $lastcard->suit &&
                $this->get_tien_len_rank($newcard) > $this->get_tien_len_rank($lastcard)) 
            {
                return True;
            }
        } else {
            assert($newcard->rank == 2);
            if($lastcard->rank != 2) {
                return True;
            } else {
                assert ($lastcard->rank == 2);
                if($newcard->suit > $lastcard->suit){
                    return True;
                }
            }
        }
        return False;
    } # check_valid_for_singles

    function cardsuit_not_real_pair($triple) {
        assert(count($triple) == 3);
        $card1 = $triple[0];
        $card2 = $triple[1];
        $card3 = $triple[2];
        if($this->is_same_color($card1, $card2))
            return $card3->suit;
        else if($this->is_same_color($card2, $card3))
            return $card1->suit;
        else if($this->is_same_color($card1, $card3))
            return $card2->suit;
        assert(False);
    } # cardsuit_not_real_pair

    function is_real_triple($cards) {
        assert(count($cards) == 3);
        $c1 = $cards[0];
        $c2 = $cards[1];
        $c3 = $cards[2];
        if($c1->rank == $c2->rank && $c1->rank == $c3->rank){
            return True;
        }
        return False;
    }

    function check_valid_for_triples($new_cards, $last_cards) {
        if($this->is_real_triple($new_cards) && $this->is_real_triple($last_cards)) {
            if($new_cards[0]->rank == 2) {
                return True;
            }
            if($cardsuit_not_real_pair($new_cards) == $cardsuit_not_real_pair($last_cards)) {
                if($new_cards[0]->rank > $last_cards[0]->rank) {
                    return True;
                } 
            }
        }

        return False;  
    } # check_valid_for_triples

    function is_real_quad($cards){
        assert(count($cards) == 4);
        $rank = -1;
        foreach($cards as $c) {
            if($rank == -1) {
                $rank = $c->rank;
            } 
            else {
                if($c->rank != $rank)  {
                    return False;
                }
            }
            $suits[] = $c->suit;
        }
        sort($suits);
        if($suits[0] + 3 != $suits[3]) {
            return False;
        }
        return True;
    }

    function check_valid_for_quads($newquad, $lastquad) {
        assert($newquad[0]->rank != 2);
        if($this->is_real_quad($newquad) && $this->is_real_quad($lastquad)){
            if($newquad[0]->rank > $lastquad[0]->rank){
                return True;
            }
        }
        return False;
    } # check_valid_for_quads

    function is_valid_move($new_cards, $last_cards) { 
        # inputs must be arrays
        $number_last_cards = count($last_cards);
        $number_new_cards = count($new_cards);

        if($number_last_cards == 0)
        {
            if($number_new_cards >= 3 && $new_cards[0]->rank != $new_cards[1]->rank)
            {
                return $this->is_real_seq($new_cards);
            } else {
                switch ($number_new_cards) {
                case 1:
                    return True; 
                case 2:
                    return $this->is_real_pair($new_cards[0], $new_cards[1]);
                    break; 
                case 3:
                    return $this->is_real_triple($new_cards);
                    break; 
                case 4:
                    return $this->is_real_quad($new_cards);
                    break; 
                default:
                    return False;
                }
            }
        }

        if($number_new_cards == $number_last_cards ) {
            #TODO chat tu
            if($number_new_cards >= 3 && $new_cards[0]->rank != $new_cards[1]->rank)
            {
                return $this->check_valid_for_seq($new_cards, $last_cards);
            } else {
                switch ($number_new_cards) {
                case 1:
                    return $this->check_valid_for_singles($new_cards, $last_cards);
                    break; 
                case 2:
                    return $this->check_valid_for_pairs($new_cards, $last_cards);
                    break; 
                case 3:
                    return $this->check_valid_for_triples($new_cards, $last_cards);
                    break; 
                case 4:
                    #Tu 4 den tu A
                    return $this->check_valid_for_quads($new_cards, $last_cards);
                    break; 
                default:
                    assert(False);
                    return False;
                } # switch
            }
        } else {
            # no_card not equal
            return $this->check_valid_for_kill_two($new_cards, $last_cards);
        }
        return False;
    }

    function check_valid_for_kill_two($new_cards, $last_cards){
        $number_last_cards = count($last_cards);
        $number_new_cards = count($new_cards);
        if($last_cards[0]->rank == 2) {
            if($number_new_cards == 4 && $number_last_cards == 1) {
                assert($new_cards[0]->rank != 3);
                assert($new_cards[0]->rank != 2);
                if($this->is_real_quad($new_cards)){
                    return True;
                }
            } else if($number_new_cards == 8 && $number_last_cards == 2) {
                if($last_cards[1]->rank == 2) {
                    foreach($new_cards as $nc) {
                        $allranks[] = $nc->rank;
                    }
                    sort($allranks);
                    return $this->has_four_cards_rank($allranks[0], $new_cards) 
                        && $this->has_four_cards_rank($allranks[7], $new_cards);
                }
            } else if($number_new_cards == 12 && $number_last_cards == 3) {
                if($this->is_real_triple($last_cards)) {
                    foreach($new_cards as $nc) {
                        $allranks[] = $nc->rank;
                    }
                    sort($allranks);
                    return $this->has_four_cards_rank($allranks[0], $new_cards) 
                        && $this->has_four_cards_rank($allranks[7], $new_cards)
                        && $this->has_four_cards_rank($allranks[11], $new_cards);
                }
            }
        }
        return False;
    }

    function is_real_seq($cards) {
        $suit = $cards[0]->suit;
        foreach($cards as $c) {
            if($c->suit != $suit) {
                return False;
            }
            $ranks[] = $c->rank;
        }
        sort($ranks);
        $ncards = count($ranks);
        if($ranks[0] + $ncards - 1 != $ranks[$ncards - 1] ) {
            return False;
        }
        return True;
    } # is_real_seq


    function check_valid_for_seq($newseq, $lastseq) {
        # TODO assuming that two inputs are seq
        if(!$this->is_real_seq($newseq) || !$this->is_real_seq($lastseq)){
            return False;
        }

        $nnews = count($newseq);
        $nlasts = count($lastseq);
        if($nnews == $nlasts) {
            if($newseq[0]->suit == $lastseq[0]->suit) {
                if($newseq[0]->rank > $lastseq[$nlasts - 1]->rank){
                    return True;
                }
            }
        }
        return False;
    } # check_valid_for_seq
}

function gen_random_card() {
    $suit = rand(0,3);
    $rank = rand(1,13);
    return new CI_Card($rank, $suit);
}


$newc[] = gen_random_card();
$oldc[] = gen_random_card();
$referee = new Referee();
print_r($newc);
print_r($oldc);
if($referee->is_valid_move($newc, $oldc) === True)
{
    echo "VALID";
} else {
    echo "INvalid";
}
?>
