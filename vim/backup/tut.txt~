Run K-mean:
any(X)
all(X)

[centroids, idx] = runkMeans(X, init_centroid, max_iters, true)

Compute singular value decomposition of A
A = U * S * V'
[U, S, V] = svd(A)

Read an image:
A = imread('pic.png')

Append by vector:
X = []
for...
	X = [X; A(i,:)]

Append and flatten
X = []
for ...
	X = [X, A(i, :)] %or X = [X A(i,:)]


%use tic/toc for timing
>>tic;i=1:10;toc


==
~=
xor(1,0)

PS1('>> ');

true : 1
false : 0

disp(sprintf('2 deciamas: %0.2f', a))

format long
format short

A = [1 2; 3 4; 5 6]

v = 1:2:10

ones(2,3)
zeros(2,3)
rand(3,3)
randn(2,3) % random both pos and neg

hist(w)
hist(w,50)

eye(3) %return diagonal matrix

2*ones(2,3)

size(MATRIX)
length(MATRIX)

who % list var
whos

clear var_name

load('file_name')
load file_name
save file_name var;
save file_name variable -ascii

A(3,2) access 
A(2,:)

A(:) put all in to 1 col

C = [A B]
C = [A; B] concatinate

v is an vector or matrix
log(v)
exp(v)
abs(v)
v + 1
-v
[val idx] = max(a)

element wise operation
a < 3
find(a < 3)
magic(3)
[r, c] = find(A>7)
prod(a)
sum(a)
max(A, [], 2) return a column, max each row
max(A(:))

flipud(matrix)
pinv(A)

#Plotting data
	plot(hoanh,tung)
	hold on;
	plot(t,y2, 'r')
	xlabel('time')
	ylabel('value')
	legend('sin','cos')
	title('myplot')
	print -dpng 'myPlog.pgn'
	close
	figure(1); plot(t,y1)
	figure(2); plot(t,y2)
	subplot(1,2,1)
	plot(t,y1)
	subplot(1,2,2)
	plot(t,y2)
	axis([0.5 1 -1 1)
	clf ; % clear figur
	imagesc(A)
	imagesc(A), colobar, colormap gray;
command chaining


#Control
indices=1:10

for i=1:10,
	hehe
end;

while i <= 5,
	  heheh
end;

if i == 6,
   break;
end;

addpath('pah\to\forder')
	
#Vectorization
