from email.Header import decode_header #Parse header
from email.parser import Parser
from email.utils import parseaddr 

#fp must be a message, not many. We can get each msg by RETR(i)
fp = open('/var/mail/famihug', 'r')

p = Parser()
m = p.parse(fp)
body = None

#Subject parse
if m['Subject'] is not None:
	decodefrag = decode_header(m['Subject'])
	subj_frag = []
	for s, enc in decodefrag:
		if enc:
			s = unicode(s, enc).encode('utf8', 'replace')
		subj_frag.append(s)
	subject = ''.join(subj_frag)
else: subject = 'Empty'

print subject

#Body parse
for part in m.walk():
	if part.get_content_type() == "text/plain":
		if body is None:
			body = ""
		if part.get_content_charset: #if charset==None, unicode() will not work
			body += part.get_payload(decode=True)
		else:
			body += unicode(part.get_payload(decode=True), part.get_content_charset(), 'replace').encode('utf8', 'replace')

#Parse address
print parseaddr(m.get('From'))[1]
print parseaddr(m.get('To'))[1]

#Parse attachment
def parse_attachment(message_part):
	content_disposition = message_part.get("Content-Disposition", None)
	if content_disposition:
		disposition = content_disposition.strip().split(':')
		if bool(content_disposition and disposition[0].lower() == "attachment"):

			file_data = message_part.get_payload(decode=True)
			attachment = StringIO(file_data)
			attachment.content_type = message_part.get_content_type()
			attachment.size = len(file_data)
			attachment.name = None
			attachment.create_date = None
			attachment.mod_date = None
			attachment.read_date = None

			for param in disposition[1:]:
				name, value = param.split('=')
				name = name.lower()

				if name == "filename":
					attachment.name = value
				elif name == "create-date":
					attachment.create_date = value
				elif name == "modification-date":
					attachment.mod_date = value
				elif name == "read-date":
					attachment.read_date = value
			return attachment
	return None

attachments = []

#TODO this can't check text file
for part in m.walk():
	attach = parse_attachment(part)
	if attach:
		print 'co attach'
		print part.get_filename()


