import java.util.*;
import java.io.*;
import java.util.concurrent.*;

class QueueTest
{
	public static void main (String [] args)
	{
		Scanner in = new Scanner(System.in);
		System.out.println("Enter des dir: ");
		String directory = in.nextLine();
		System.out.println("Enter keyword: ");
		String keyword = in.nextLine();

		final int FILE_QUEUE_SIZE = 10;
		final int FIND_THREADS = 100;

		BlockingQueue<File> queue = new ArrayBlockingQueue<File>(FILE_QUEUE_SIZE);
		FileETask enumerator = new FileETask(queue, new File(directory));
		new Thread(enumerator).start();
		for(int i = 1; i <= FIND_THREADS; i++)
			new Thread(new FindTask(queue, keyword)).start();
	}
}

class FileETask implements Runnable
{
	public FileETask(BlockingQueue<File> queue, File startingDirectory)
	{
		this.queue = queue;
		this.startingDirectory = startingDirectory;
	}

	public void run()
	{
		try
		{
			enuma(startingDirectory);
			queue.put(DUMMY);
		}
		catch (InterruptedException e)
		{
		}
	}

	public void enuma(File directory) throws InterruptedException
	{
		File[] files = directory.listFiles();
		for(File f : files)
		{
			if(f.isDirectory()) enuma(f);
			else queue.put(f);
		}


	}

	public static File DUMMY = new File("");
	private File startingDirectory;
	private BlockingQueue<File> queue;
}



class FindTask implements Runnable
{
	public FindTask(BlockingQueue<File> queue, String keyword)
	{
		this.queue = queue;
		this.keyword = keyword;
	}

	public void run()
	{
		try
		{
			boolean done = false;
			while(!done)
			{
				File file = queue.take();
				if(file == FileETask.DUMMY)
				{
					done = true;
				}
				else find(file);
			}
		}
		catch(IOException e)
		{
			e.printStackTrace();
		}
		catch(InterruptedException e)
		{
		}
	}

	public void find(File file) throws IOException
	{
		Scanner in = new Scanner(File FileInputStream(file));
		int lineNumber = 0;
		while(in.hasNextLine())
		{
			lineNumber++;
			String line = in.nextLine();
			if(line.contains(keyword)) System.out.printf("%s:%d:%s%n", file.getPath(), lineNumber, line);
		}
		in.close();
	}

	private BlockingQueue<File> queue;
	private String keyword;
}
