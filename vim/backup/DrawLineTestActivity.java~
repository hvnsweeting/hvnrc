package com.familug.hvn.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;

import android.app.Activity;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.os.Bundle;
import android.view.View;

public class DrawLineTestActivity extends Activity {
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		DrawLine drawLine = new DrawLine(this);
		drawLine.setBackgroundColor(Color.WHITE);
		

		setContentView(drawLine);
	}
}

class DrawLine extends View {

	public DrawLine(Context context) {
		super(context);
	}

	@Override
	protected void onDraw(Canvas canvas) {
		super.onDraw(canvas);
		Paint paint = new Paint();

		// canvas.drawPoint(30, 30, paint);
		// canvas.drawLine(10, 50, 320, 50, paint);
		//		canvas.drawRect(10, 20, 50, 60, paint);
		Point p1 = new Point(20,20);
		Point p2 = new Point(80,80);
		Point p3 = new Point(5,80);
		ArrayList<Point> points = new ArrayList<Point>();
		points.add(p1);
		points.add(p2);
		points.add(p3);
		
		canvas.drawPoint(p1.x, p1.y, paint);
		canvas.drawPoint(p2.x, p2.y, paint);
		canvas.drawPoint(p3.x, p3.y, paint);
		
		canvas.drawLine(p1.x, p1.y, p2.x, p2.y, paint);
		canvas.drawLine(p2.x, p2.y, p3.x, p3.y, paint);
		canvas.drawLine(p3.x, p3.y, p1.x, p1.y, paint);
		//TODO get input, PUT ALL TO AN ARRAYLIST
		
		fillPolygon(points, Color.GREEN, canvas);
	}

	private void fillPolygon(ArrayList<Point> points, int color, Canvas canvas) {
		//get ybottom
		Point p1 = new Point(20,20);
		Point p2 = new Point(80,80);
		Point p3 = new Point(5,80);

		int yBottom = 0;
		int yTop; //TODO yTop = screenHeight
	  // 	= Math.max(p1.y, p2.y);
	//	yBottom = Math.max(yBottom, p3.y);
		//Find yBottom and yTop
		for (Point p : points)
		{
			yBottom = Math.max(yBottom, p.x);
		}

		//get ytop
		//int yTop = Math.min(p1.y, p2.y);
		//yTop = Math.min(yTop, p3.y);
		
		//Danh sach cac canh;
		ArrayList<Edge> list = new ArrayList<Edge>(); 
		for(int i = 0; i < list.size() - 2; i++)//TODO check thsi
		{
			list.add(new Edge(list[i], list[i + 1]));
		}
		list.add(new Edge(list[list.size()], list[0]));
//		list.add(new Edge(p1, p2));
//		list.add(new Edge(p2, p3));
//		list.add(new Edge(p3, p1));
		//TODO sort theo ymin
		Collections.sort(list, new Comparator<Edge>() {

			@Override
			public int compare(Edge lhs, Edge rhs) {
				int y1 = lhs.getyMin();
				int y2 = rhs.getyMin();
				if (y1 > y2)
					return 1;
				else if (y1 == y2)
					return 0;
				else return -1;
			}
		});
		
		Paint paint = new Paint();
		paint.setColor(color);
		//Active edge table
		ArrayList<Edge> AET = new ArrayList<Edge>();
//		float x1 = p1.x;
//		float x2 = p1.x;
//		float overM1 = (float)(p2.x-p1.x)/(p2.y-p1.y);
//		float overM2 = (float)(p3.x-p1.x)/(p3.y-p1.y);
		for(int k = yTop; k < yBottom; k++)
		{
			
			//TODO check xem k > yMin ko?, neu co thi them canh vao AET, sau khi them, sort AET theo x
			//for(Edge e: AET)
			//{
			//e.xIntersect += e.dxPerScan;
			//
			//
			//}
			//setIntersect , update intersect
			//TODO check xem k < yMax k? neu ko, remove canh ra khoi aet
//			x1 += overM1;
//			x2 += overM2;
			canvas.drawLine(x1, k, x2, k, paint);
			
			//Tim giao diem dong quet voi canh da giac
			//Sap xep hoanh do giao diem theo thu tu tang dan
			//To mau cac cap diem tren duong k
//			float x1 = 
		}
	} 
}

class Edge {
	public Edge(Point p1, Point p2) {
		this.p1 = p1;
		this.p2 = p2;
		yMin = Math.min(p1.y, p2.y);
		dxPerScan = (float)(p2.x-p1.x)/(p2.y-p1.y);
		xIntersect = (p1.y >= p2.y) ? p1.x : p2.x;
	}
	
	int yMin;
	int xIntersect; 
	float dxPerScan;
	public int getyMin() {
		return yMin;
	}
	public void setyMin(int yMin) {
		this.yMin = yMin;
	}
	public int getxIntersect() {
		return xIntersect;
	}
	public void setxIntersect(int xIntersect) {
		this.xIntersect = xIntersect;
	}
	public float getDxPerScan() {
		return dxPerScan;
	}
	public void setDxPerScan(float dxPerScan) {
		this.dxPerScan = dxPerScan;
	}
	public int getDeltaY() {
		return deltaY;
	}
	public void setDeltaY(int deltaY) {
		this.deltaY = deltaY;
	}

	int deltaY;
	Point p1;
	Point p2;
}


class Poligon {
	public Poligon() {
	}
	private Point p1 = new Point(10,10);
	private Point p2 = new Point(60, 10);
	private Point p3 = new Point(60, 40);
	private Point p4 = new Point(10, 40);
}

class MyPoint {
	public MyPoint() {
		x = 0;
		y = 0;
	}

	float x;
	float y;
}
