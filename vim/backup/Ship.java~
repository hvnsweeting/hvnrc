package com.familug.hvn;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

class Ship {
	Coordinate heartCoor = null;
	Coordinate startTail = null;
	Coordinate endTail = null;
	ArrayList<Coordinate> firedArl = null;

	String id = null;
	String order = null;
	String historyPath = null;
	String configPath = null;
	String cmdPath = null;
	String tempPath = null;

	BufferedReader bfHistory = null;
	BufferedWriter bfCommandFile = null;
	BufferedReader bfConfig = null;
	BufferedReader bfTmp = null;
	private int numberOfShoot;
	boolean isFired = false;

	public void initMyShip() {
		if (order.equalsIgnoreCase("1"))
			this.id = "1";
		else
			this.id = "2";
		// System.out.println("Im " + id);

		// add all point around the heart
		firedArl.add(new Coordinate(heartCoor.y - 1, heartCoor.x));
		firedArl.add(new Coordinate(heartCoor.y, heartCoor.x - 1));
		firedArl.add(heartCoor);
		firedArl.add(new Coordinate(heartCoor.y, heartCoor.x + 1));

		firedArl.add(startTail);
		Coordinate middleTail = getMiddleTail(startTail, endTail);
		firedArl.add(middleTail);
		firedArl.add(endTail);

		// for (Coordinate c : firedArl)
		// System.out.println(c);

	}// initMyShip

	private Coordinate getMiddleTail(Coordinate startTail2, Coordinate endTail2) {
		// duoi nam ngang
		if (startTail2.y == endTail2.y)
			return new Coordinate(startTail2.y, (startTail2.x + endTail2.x) / 2);
		else
			// duoi nam doc
			return new Coordinate((startTail2.y + endTail2.y) / 2, startTail2.x);
	}// getMiddleTail

	@Override
	public String toString() {
		return "Ship [order=" + order + ", historyPath=" + historyPath
				+ ", configPath=" + configPath + ", cmdPath=" + cmdPath
				+ ", tempPath=" + tempPath + "]";
	}

	public void readHistory() throws IOException {
		String line = null;
		String lastProtectedLine = null;
		String[] tokens;
		numberOfShoot = 0;
		while ((line = bfHistory.readLine()) != null) {
			tokens = line.split("[\t]");
			// enemy line
			if (!line.startsWith(this.id)) {
				Coordinate c = new Coordinate(tokens[1]);
				if (!firedArl.contains(c))
					firedArl.add(c);
			} else {
				numberOfShoot++;
				// Mine
				if (tokens.length == 4) {
					tokens[3].equalsIgnoreCase("PROTECTED");
					lastProtectedLine = line;
				}
				// ban trung
				if (tokens[2].equalsIgnoreCase("OK")) {
					// TODO ban xung quanh
				} else {
					// TODO ban lung tung
					// fire(new Coordinate("7 5"));
				}
			}

		}// while
			// Read his to find out where enemy fire , it is almost not where he
			// is
			// NOTE coor format is Y then X
			// TODO
			// check line with care about my id
		if (lastProtectedLine != null) {
			tokens = lastProtectedLine.split("[\t]");
			fireAroundThis(new Coordinate(tokens[1]));
			// fire around this point
		}

	}

	private void fireAroundThis(Coordinate coordinate) throws IOException {
		Coordinate willFire;
		// up
		willFire = new Coordinate(coordinate.y + 1, coordinate.x);
		if (!firedArl.contains(willFire)) {
			fire(willFire);
			return;
		}

		willFire = new Coordinate(coordinate.y - 1, coordinate.x);
		if (!firedArl.contains(willFire)) {
			fire(willFire);
			return;
		}

		willFire = new Coordinate(coordinate.y, coordinate.x + 1);
		if (!firedArl.contains(willFire)) {
			fire(willFire);
			return;
		}

		willFire = new Coordinate(coordinate.y, coordinate.x - 1);
		if (!firedArl.contains(willFire)) {
			fire(willFire);
			return;
		}

		fire(randomACoordinae());

	}

	public void randomShoot() throws IOException {
		if (isFired)
			return;
		String line = null;
		int cntr = 0;

		while ((line = bfTmp.readLine()) != null) {
			cntr++;
			if (cntr == numberOfShoot + 1) {
				fire(new Coordinate(line));
				return;
			}
		}

		// reach here if end of file
		Coordinate c = null;
		c = randomACoordinae();
		while (!firedArl.contains(c)) {
			c = randomACoordinae();
		}
		fire(c);
		return;
	}

	private Coordinate randomACoordinae() {
		int Min = 1;
		int Max = 15;
		int y = Min + (int) (Math.random() * ((Max - Min) + 1));
		int x = Min + (int) (Math.random() * ((Max - Min) + 1));
		Coordinate c = new Coordinate(y, x);
		return c;
	}

	public void configAllFile() throws IOException {
		String line = null;
		String[] tokens = null;
		try {
			firedArl = new ArrayList<Coordinate>();

			
			// read config file
			bfConfig = new BufferedReader(new FileReader(configPath));
			line = bfConfig.readLine();
			tokens = line.split("[ ]");
			heartCoor = new Coordinate(tokens[0], tokens[1]);

			line = bfConfig.readLine();
			tokens = line.split("[ ]");
			startTail = new Coordinate(tokens[0], tokens[1]);
			endTail = new Coordinate(tokens[2], tokens[3]);
			// System.out.println(heartCoor + ": start" + startTail + ":end"
			// + endTail);

			while ((line = bfConfig.readLine()) != null) {
				tokens = line.split("[ ]");
				firedArl.add(new Coordinate(tokens[0], tokens[1]));
			}

			bfTmp = new BufferedReader(new FileReader(tempPath));
			if(bfTmp.readLine() == null)
			{
				bfTmp.close();
				BufferedWriter bw = new BufferedWriter(new FileWriter(tempPath));
				writeToTemp(bw, "2 2");
				
				2 2
				5 2
				8 2
				11 2
				14 2
				14 5
				14 8
				14 11
				14 14
				11 14
				8 14
				5 14
				2 5
				2 8
				5 11
				5 8
				5 5
				8 5
				11 5
				11 8
				11 11
				8 11
				8 8
				//write temp content
			}
			// setup hist and command file
			bfCommandFile = new BufferedWriter(new FileWriter(cmdPath));
			bfHistory = new BufferedReader(new FileReader(historyPath));

		} catch (IOException e) {
			e.printStackTrace();
		}
	}// configAllFile

	private void writeToTemp(BufferedWriter bw, String string) throws IOException {
		bw.write(string;
		bw.write("\n");

	}

	public void fire(Coordinate c) throws IOException {
		// TODO REad history and decide
		bfCommandFile = new BufferedWriter(new FileWriter(cmdPath));
		if (!firedArl.contains(c))
			firedArl.add(c);
		bfCommandFile.write("S\t" + c + "\n");
		bfCommandFile.close();
		// them toa do da ban vao firedArl
	}// fire

	public void closeAllFile() throws IOException {
		if (bfCommandFile != null)
			bfCommandFile.close();
		if (bfConfig != null)
			bfConfig.close();
		if (bfHistory != null)
			bfHistory.close();
		if (bfTmp != null)
			bfTmp.close();
	}// closeAllFile

}// Ship

