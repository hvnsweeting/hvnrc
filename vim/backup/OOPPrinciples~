DRY for functionality not for code, don't abuse it. Dont combine anything which uses similar but not related
Encapsulate what varies
Open Closed principle - not understood yet
Single responsibility principle: SRP. 1 class - 1 functionality
Dependency injection (inversion principle) - not understood yet
Composition over inheritance : implement over extends - make use of polymorphism
Liskov substitution Principle (LSP): subclass must enhance functionality not reducing it
INTERFACE SEGREGATION PRINCIPLE (ISP): a class should not implement an Interface if it doesn't use that.
Programming for interface, not implementation : use Interface type on variables, return type of method or argument type of my method
Delegation principle: compare, hashCode by class, not by client
