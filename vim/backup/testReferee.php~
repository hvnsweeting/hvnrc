<?php
include_once('Referee.php');
include_once('Card.php');

function get_all_cards(){
    $cards = array(); for($rank = 1; $rank <= 13; $rank++)
    {
        for($suit = 0; $suit < 4; $suit++) {
            $cards[] = new CI_Card($rank, $suit); } }
    return $cards;
} 

function get_dragon_seq_hand(){
    $cards = array();
    $suit = rand(0,3);
    for($rank = 1; $rank <= 13; $rank++)
    {
        $cards[] = new CI_Card($rank, $suit);
    }
    return $cards;
}

function get_four_3_or_2_hand(){
    $cards = array();
    $rank = rand(2,3);
    for($suit = 0; $suit < 4; $suit++)
    {
        $cards[] = new CI_Card($rank, $suit);
    }
    return $cards;
}

function get_six_pairs_hand() {
    $cards = array();

    for($i = 0; $i < 6; $i++)
    {
        $rank = rand(1,13);
        for($j = 0; $j < 2; $j++)
        {
           $suit = rand(0,3);
           $cards[] = new CI_Card($rank, $suit);
        }
    }
    return $cards;
}

function get_five_consecutive_hand() {
    $cards = array();

    for($i = 0; $i < 2; $i++)
    {
        for($rank = 3; $rank < 8; $rank++)
        {
           $suit = rand(0,3);
           $cards[] = new CI_Card($rank, $suit);
        }
    }
    return $cards;
}

function test_win_from_start($referee, $cards){
    print_r($cards);
    $referee->is_win_from_start($cards);
    $referee->has_three_consecutive_pairs_start_with_3s($cards);
    $referee->has_dragon_seq($cards);
    $referee->has_four_cards_rank(3, $cards);
    $referee->has_four_cards_rank(2, $cards);
    $referee->has_six_pairs($cards);
    $referee->has_five_consecutive_pairs($cards);

}

function test_two_valid_seqs($referee) {
    $news = array(new CI_Card(7, 1), new CI_Card(8, 1), new CI_Card(9,1));
    $olds = array(new CI_Card(4, 1), new CI_Card(5, 1), new CI_Card(6,1));
    $sseq = array(new CI_Card(4, 1), new CI_Card(5, 1), new CI_Card(6,1));
    $hseq = array(new CI_Card(7, 3), new CI_Card(8, 3), new CI_Card(9,3));

    assert($referee->check_valid_for_seq($news, $olds));
    assert(!$referee->check_valid_for_seq($olds, $news));
    assert(!$referee->check_valid_for_seq($hseq, $sseq));
}

function test_real_seq($referee) {
    $news = array(new CI_Card(7, 1), new CI_Card(8, 1), new CI_Card(9,1));
    $shuffle = array(new CI_Card(9, 1), new CI_Card(8, 1), new CI_Card(7,1));
    $diff_suit = array(new CI_Card(9, 2), new CI_Card(10, 1), new CI_Card(11,1));
    $notconsecutive = array(new CI_Card(9, 1), new CI_Card(10, 1), new CI_Card(13,1));
    assert($referee->is_real_seq($news));
    assert($referee->is_real_seq($shuffle));
    assert(!$referee->is_real_seq($diff_suit));
    assert(!$referee->is_real_seq($notconsecutive));
    #TODO test 2
}

function test_2h_is_biggest($referee) {
    $two3 = new CI_Card(2, 3);
    $two0 = new CI_Card(2, 0);
    $one2 = new CI_Card(1, 2);
    $k_3 = new CI_Card(13, 3);

    assert ($referee->is_valid_move(array($two3), array($two0)));
    assert ($referee->is_valid_move(array($two3), array($one2)));
    assert ($referee->is_valid_move(array($two3), array($k_3)));
    assert (!$referee->is_valid_move(array($one2), array($k_3)));
}


function test_valid_kill_two($referee) {
    $quad[] = new CI_Card(4,0);
    $quad[] = new CI_Card(4,1);
    $quad[] = new CI_Card(4,2);
    $quad[] = new CI_Card(4,3);
    assert($referee->check_valid_for_kill_two($quad, array(new CI_Card(2,1))));
    assert(!$referee->check_valid_for_kill_two($quad, array(new CI_Card(5,1))));
    $quad[] = new CI_Card(7,0);
    $quad[] = new CI_Card(7,1);
    $quad[] = new CI_Card(7,2);
    $quad[] = new CI_Card(7,3);
    assert($referee->check_valid_for_kill_two($quad, array(new CI_Card(2,1), new CI_Card(2,2))));
    assert(!$referee->check_valid_for_kill_two($quad, array(new CI_Card(5,1), new CI_Card(2,2))));
}

function test_real_quad($referee) {
    $quad[] = new CI_Card(2,0);
    $quad[] = new CI_Card(2,1);
    $quad[] = new CI_Card(2,2);
    $quad[] = new CI_Card(2,3);

    $fakequad[] = new CI_Card(3,0);
    $fakequad[] = new CI_Card(3,1);
    $fakequad[] = new CI_Card(3,2);
    $fakequad[] = new CI_Card(3,0);

    $miscquad[] = new CI_Card(3,0);
    $miscquad[] = new CI_Card(9,1);
    $miscquad[] = new CI_Card(4,2);
    $miscquad[] = new CI_Card(7,3);

    assert($referee->is_real_quad($quad));
    assert(!$referee->is_real_quad($fakequad));
    assert(!$referee->is_real_quad($miscquad));
}

function test_valid_before_null($referee) {
    $fakequad[] = new CI_Card(3,0);
    assert($referee->is_valid_move($fakequad, array()));
    $fakequad[] = new CI_Card(3,1);
    assert($referee->is_valid_move($fakequad, array()));
    $fakequad[] = new CI_Card(3,2);
    assert($referee->is_valid_move($fakequad, array()));
    $fakequad[] = new CI_Card(3,3);
    assert($referee->is_valid_move($fakequad, array()));
    $news = array(new CI_Card(7, 1), new CI_Card(8, 1), new CI_Card(9,1));
    assert($referee->is_valid_move($news, array()));
}

function test_remove_card() {
    $fakequad[] = new CI_Card(3,0);
    $fakequad[] = new CI_Card(3,1);

    $show_down[] = new CI_Card(3,0);
    $show_down[] = new CI_Card(3,1);
    $show_down[] = new CI_Card(3,2);

    $show_down = remove_show_down_from_hand($fakequad, $show_down);
    var_dump($show_down);
}

function remove_show_down_from_hand($show_down, $hand_card){
    foreach($show_down as $card) {
        foreach($hand_card as $i => $c) {
            if($c->rank == $card->rank && $c->suit == $card->suit) {
                unset($hand_card[$i]);
                break;
            }
        }
    }
    return $player->hand_card;
}

$fullcards = get_all_cards();
$dragon_seq_hand = get_dragon_seq_hand();
$four_3_hand = get_four_3_or_2_hand();
$six_pairs_hand = get_six_pairs_hand();
$five_cons_hand = get_five_consecutive_hand();
$test_hands = array($fullcards, $dragon_seq_hand, $four_3_hand, 
    $six_pairs_hand, $five_cons_hand);
$referee = new CI_Referee;

foreach($test_hands as $hand) { test_win_from_start($referee, $hand);
}

test_2h_is_biggest($referee);
test_two_valid_seqs($referee);
test_real_seq($referee);
test_real_quad($referee);
test_valid_kill_two($referee);
test_valid_before_null($referee);
test_remove_card();
?>
