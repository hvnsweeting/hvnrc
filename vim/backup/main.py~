import os
import smtplib
import socket
import json
import logging
from PyQt4 import QtGui, QtCore
from PyQt4.QtGui import QMessageBox
from form1 import *
from urllib2 import urlopen, urlparse, Request
from datetime import datetime
from VC_domains import VC_domains
from BeautifulSoup import BeautifulSoup, SoupStrainer
from linuxcmdthread import PingThread, TracePathThread
from check_vital_thread import CheckVitalThread

logging.basicConfig(filename="netchecker.log", filemode='w',\
        format='%(asctime)s %(levelname)s %(message)s',
        level=logging.DEBUG)

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s

class MyApp(Ui_MainWindow):
    def __init__(self, app):
        logging.info("Init MyAPP")
        self.done_counter = 0
        self.checked_checkbox = 0
        self.app = app
        self.pingThread = PingThread()
        self.traceThread = TracePathThread()
        self.checkVitalThread = CheckVitalThread()

    def setupUi(self, *args):
        super(MyApp, self).setupUi(*args)
        logging.info("setupUi")
        QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL(_fromUtf8("clicked()")), self.doCheck)
        QtCore.QObject.connect(self.lineEdit, QtCore.SIGNAL(_fromUtf8("textEdited(QString)")), self.onNewUrl)
        QtCore.QObject.connect(self.pushButton_2, QtCore.SIGNAL(_fromUtf8("clicked()")), self.sendReport)

    def append_to_text_browser(self, newtext):
        """This method is callback for some thread run separated
        from main thread"""
        self.textBrowser.append(newtext)
        self.done_counter += 1
        logging.info("task done %s, checked check box %s" % (self.done_counter, self.checked_checkbox))

        #Set enable, change text button when done check 
        #not == because we are having problem with thread. They can run many time than expect
        if self.done_counter >= self.checked_checkbox:
            logging.info("counter : %s >= %s checked " %(self.checked_checkbox, self.done_counter))
            font = QtGui.QFont()
            font.setBold(True)
            font.setWeight(75)
            font.setKerning(True)
            self.pushButton.setFont(font)
            del font
            self.pushButton.setText(QtGui.QApplication.translate("MainWindow", "Done!", None, QtGui.QApplication.UnicodeUTF8))
            self.pushButton_2.setText(QtGui.QApplication.translate("MainWindow", "Send report", None, QtGui.QApplication.UnicodeUTF8))
            self.pushButton_2.setEnabled(True)
            #reset counter
            self.done_counter = 0
            self.checked_checkbox = 0
            logging.info("It should done check here , reset counter")

    def onNewUrl(self):
        font = QtGui.QFont()
        self.pushButton.setFont(font)
        del font
        self.pushButton.setText(QtGui.QApplication.translate("MainWindow", "Do new check", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton.setEnabled(True)
        self.app.processEvents()

    def doCheck(self):
        logging.info("doCheck beginning")
        self.textBrowser.clear()

        jobj = urlopen('http://httpbin.org/ip')
        user_data = (json.load(jobj))
        jobj.close()
        self.user_ip = str(user_data['origin'])

        if str(self.lineEdit.text()) != "":
            self.pushButton.setText(QtGui.QApplication.translate("MainWindow", "Checking...", None, QtGui.QApplication.UnicodeUTF8))
            self.pushButton.setEnabled(False)
            self.pushButton_2.setEnabled(False)
            self.app.processEvents()
            url = str(self.lineEdit.text()).strip()
            #NOTE what about ip ???
            if "://" not in url:
                try:
                    urlopen("http://" + url)
                    url = "http://" + url
                except:
                    url = "https://" + url

            #Append trailng / if url not end with it 
            if "/" != url[-1]:
                url += "/"
            self.url = url

            self.netloc = urlparse.urlparse(url).netloc
            self.allnetloc = set([self.netloc])

            import httplib2
            http = httplib2.Http()

            try:
                #TODO set timeout. For 8.8.8.8
                status, response = http.request(self.url)
                for link in BeautifulSoup(response, parseOnlyThese=SoupStrainer(['script','img','link'])):
                    if link.has_key('src'):
                        tmp = link['src']
                        self.allnetloc.add(str(urlparse.urlparse(tmp).netloc)) # str() for convert unicode
                    elif link.has_key('href'):
                        tmp = link['href']
                        self.allnetloc.add(str(urlparse.urlparse(tmp).netloc))
            except Exception as e:
                print e
                self.textBrowser.setPlainText("Please use another link")

                


            if '' in self.allnetloc: self.allnetloc.remove('')

            if self.checkBox_1.isChecked():
                self.checked_checkbox += 1
                self.pingThread.set_data(self.allnetloc)
                QtCore.QObject.connect(self.pingThread, QtCore.SIGNAL("Data"), self.append_to_text_browser)
                logging.info("Called pingThread")
                self.pingThread.start()

            if self.checkBox_2.isChecked():
                self.checked_checkbox += 1
                self.traceThread.set_data(self.allnetloc)
                QtCore.QObject.connect(self.traceThread, QtCore.SIGNAL("TraceData"), self.append_to_text_browser)
                logging.info("Called traceThread")
                self.traceThread.start()

            #Load vital components
            if self.checkbox_vital.isChecked():
                self.checked_checkbox += 1
                self.checkVitalThread.set_data(self.url)
                QtCore.QObject.connect(self.checkVitalThread, QtCore.SIGNAL("VitalData"), self.append_to_text_browser)
                logging.info("Called checkVitalThread")
                self.checkVitalThread.start()

    def sendReport(self):
        isVC_domain = False
        for domain in VC_domains:
            if domain in self.netloc:
                isVC_domain = True
                self.msgBox = QtGui.QMessageBox(self.centralwidget)
                ret_click = self.msgBox.information(self.msgBox, "Notice", 'Check results will be sent to: svr@vccorp.vn', QMessageBox.Ok | QMessageBox.Cancel, QMessageBox.Ok)

                if ret_click == QMessageBox.Ok:
                    self.sendEmail()
                break

        if not isVC_domain:
            self.inputDialog = QtGui.QInputDialog(self.centralwidget)
            toaddr, ok = self.inputDialog.getText(self.inputDialog, "Send to?", "Please enter the email-address you want to send report to:")
            if ok:
                self.sendEmail(str(toaddr))

    def sendEmail(self, toaddr, popup=True):   
        self.pushButton_2.setText(QtGui.QApplication.translate("MainWindow", "Sending...", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton_2.setEnabled(False)
        self.app.processEvents()

        time_now = datetime.now().ctime()
        # Initialize SMTP server
        server = smtplib.SMTP('smtp.gmail.com:587')
        server.starttls()
        username = 'netchecktool@vccorp.vn'
        password = 'd0b4ce30e724f8d6e987f94ae4c89490'
        server.login(username,password)

        #Send mail
        subject = "[Netchecktool] Report for %s" % self.netloc
        senddate = datetime.strftime(datetime.now(), '%Y-%m-%d')
        fromaddr = username

        #Delete a line below when finish:
        #toaddr = 'minhchuduc@vccorp.vn'

        header = "Date: %s\r\nFrom: %s\r\nTo: %s\r\nSubject: %s\r\nX-Mailer: VC-Mailer\r\n\r\n" % (senddate, fromaddr, toaddr, subject)
        body = "NetCheker REPORT: \n"+self.url+" @ "+time_now+"\n\n"
        body += "Check from IP: %s \n\n" % self.user_ip

        """
        We append all our result to textBrowser, now get them all
        Only get result before send mail because each separate thread
        can stop in whenever
        """
        
        self.Report = unicode(self.textBrowser.toPlainText())

        body += self.Report

        toaddr = toaddr.strip()
        if toaddr != 'svr@vccorp.vn':   # always send a copy of results to svr@vccorp.vn
            server.sendmail(fromaddr, 'minhchuduc@vccorp.vn', header+body)

        server.sendmail(fromaddr, toaddr, header+body)
        server.quit()
        self.pushButton_2.setText(QtGui.QApplication.translate("MainWindow", "Sent!", None, QtGui.QApplication.UnicodeUTF8)) 
        notice_msg = "Your report has been sent to %s\n Thank you for your cooperation!" % toaddr
        if popup:
            self.infoPopup(notice_msg)

    def infoPopup(self, notice_msg):
        self.msgBox = QtGui.QMessageBox(self.centralwidget)
        self.msgBox.information(self.msgBox, "Report sent!", notice_msg, QtGui.QMessageBox.Ok)




if __name__ == "__main__":

    import sys
    app = QtGui.QApplication(sys.argv)
    MainWindow = QtGui.QMainWindow()
    MainWindow.setWindowIcon(QtGui.QIcon('zChecker.png'))
    ui = MyApp(app)

    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

