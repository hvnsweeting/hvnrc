# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

alias troi='while read i; do echo $i; sleep 0.5; done <'

# frequent
alias psg='ps aux | grep '
alias irc='irssi --connect irc.freenode.net --nick hvn'
alias lstd='cat ~/.TODO.rst'
alias dols='doctl compute droplet list'
alias vitd='vim ~/.TODO.rst'
function addtd () {
    echo "- $@" >> ~/.motd
}
# python tool
alias black='black -l79'

# network
alias myip='dig +short myip.opendns.com @208.67.222.222'
alias myisp='curl ipinfo.io'

if [ $(uname) == "Linux" ]; then
  alias pn='ping -W3 -c1 tuoitre.vn || ping -W3 -c2 8.8.8.8 || echo "NO CONNECTION "'
else
  # OSX -t means timeout
  alias pn='ping -t3 -c2 tuoitre.vn || ping -t3 -c2 8.8.8.8 || echo "NO CONNECTION "'
fi
alias expose='lsof -i -s TCP:LISTEN -nP | egrep -v "127.0.0.1|::1"'

# get all syslog messages in a range of HH:MM -> HH:MM
function logrange() {
  start_hhmm=$1
  end_hhmm=$2
  syslogfile=$3
  sed -n "/ $start_hhmm:/,/ $end_hhmm:/p" $syslogfile
}

# slog greps given PATTERN in SERVER syslog file
function slog() {
    PATTERN=$1
    SERVER=$2
    ssh $SERVER "grep -in '$PATTERN' /var/log/syslog"
}

function tgrep () {
  GREP=$1
  FILETYPE=$2
  find . -name "*.$FILETYPE" | xargs grep -Rn "${GREP}"
}

function tgrepl () {
  GREP=$1
  FILETYPE=$2
  find . -name "*.$FILETYPE" | xargs grep -l "${GREP}"
}

function grepsalt() {
    grep -v -E ' Missing key|salt.loader \(loader\.gen_functions|OrderedDict|Executing state|salt\.loaded\.int\.render\.yaml|Completed state' "$1" | less -N
}
function saltabsent() {
    find $1 -name 'absent.sls' -type f | sed -e 's://:/:g' -e 's:/:.:g' -e 's:.sls::g' | xargs printf '%s,'; echo
}

alias py2='source ~/dream/bin/activate'
alias py3='source ~/python3/bin/activate'
alias ipy='. ~/dream/bin/activate; cd ~/dream/code; ipython2'
alias ipy3='. ~/python3/bin/activate; cd ~/python3/; ipython3'

SCROOT="~/salt/common"

# cds
alias cdd="cd ~/Dropbox"
alias cdp="cd ~/python2"
alias cdcm="cd $SCROOT"
alias cdrc='cd ~/me/hvnrc'
alias cdf='cd ~/FOSS'
alias cdg="cd ~/FOSS"
alias cdfs='cd ~/FOSS/salt'

# PyTimesheet
alias pts='/Users/hvn/FOSS/pytimesheet/storage.py'

# ssh
alias sshr='ssh-keygen -R'
function sshroot () {
    ssh -v root@$1
}

# GIT
alias gtus='git status'
alias gs='git status'
alias gcm='git commit -m '
alias gcam='git commit -am '
alias gco='git checkout'
alias gdi='git diff'
alias gfu='git commit --amend --no-edit' # fixup
alias gdev='git checkout develop && git merge origin/develop'
alias gfap='git fetch --all -p --tags'
alias gta='HERE=`pwd`; for d in */; do cd $d; echo $d; git checkout master; git pull; cd $HERE; done;'
alias gpo='git push origin $(git symbolic-ref --short HEAD)'
alias gpom='git pull origin master'
alias gdep='git fetch --all; git checkout testing && git reset --hard origin/testing && git merge origin/develop && git push origin testing'
# git latest branches
alias glb='git for-each-ref --sort=-committerdate refs/heads/ | head'
# list of files changed in latest commit
alias glast='git diff-tree --name-only -r --no-commit-id HEAD'

gfa () {
    current=`pwd`
    if [ -z $1 ]; then
        dest=/home/hvn/FOSS/bfs/*/
    else
        dest=$1
    fi
    for n in `find $dest -name '.git' -type d `;
    do
        dir=$(echo $n | grep -Eo '.*/')
        cd $dir
        echo "fetching in $(pwd)"
        git fetch origin -p
    done
    cd $current
}

# Saltstack
alias scdoc="cd $SCROOT; time ./doc/build.py"

# common developer tools
# find the most common used Python vars
function pyvars () {
    find $1 -name '*.py' | xargs grep ' = ' | cut -f1 -d'=' | tr -d ' ' | cut -f2 -d':' | sort -nr | uniq -c| sort -nr| head -n30
}

# dangerous alias like for shutting down computer
if [ -f ~/.ugly_aliases ]; then
    . ~/.ugly_aliases
fi

# Auto deploy salt for test
deps () {
    saltcommon=$1
    address=$2
    SLSes=$(echo $3 | sed 's/,$//')
    salt_common=`pwd`
    non_common=${4:-$salt_common}
    if [ ! -e 'nrpe/init.sls' ]; then
        echo "$salt_common"
        echo "It does not look like root salt-common dir. Exitting"
        return
    fi

    cd $saltcommon/..
    parent=`pwd`

    cd $parent/pillar/dev
    if [ "$(git rev-parse --abbrev-ref HEAD)" == "develop" ]; then
        echo -n "Pillar is in branch develop, continue? [y/n]:"
        read _answ
        if [ ${_answ} != "y" ]; then
            cd $salt_common
            return
        fi
    fi

    cd $salt_common
    # TODO verify is a salt-common repo
    tarball=/tmp/salt_`date +%Y%m%d_%H%M%S`.tar.gz
    # avoid too verbose filename
    filename=$(echo $SLSes | head -c20)
    logfile=/var/log/salt/`date +%Y%m%d_%H%M%S_$filename.log`
    errorfile=$logfile$$
    set -x
    $saltcommon/bootstrap_archive.py $parent/pillar/dev $non_common > $tarball
    set +x
    tar tzf $tarball 2>&1 > /dev/null || { echo "bad tarball" && return ; }

    set -x
    if [ ! -z $address ]; then
        if ! `scp $tarball root@$address:/tmp`; then
            ssh-keygen -f ~/.ssh/known_hosts -R $address
            scp -oStrictHostKeyChecking=no $tarball root@$address:/tmp
        fi

        RHOST=$(ssh -T -oSendEnv=no -oStrictHostKeyChecking=no root@$address 'ntpdate ntp.ubuntu.com 2>&1 >/tmp/ntp_salt_bootstrap; hostname')

        # run the salt-call
        TERM=dumb ssh -T -oSendEnv=no -oStrictHostKeyChecking=no root@$address << EOF
        export TERM=dumb
        cd /; rm -rf /root/salt; tar xzf $tarball;

        dpkg -l 'salt-minion' || /root/salt/states/salt/minion/bootstrap.sh $RHOST
        echo "log_level: info" > /etc/salt/minion.d/log.conf
        echo "file_log_level: debug" >> /etc/salt/minion.d/log.conf
        cd /root/salt;
        rm -rf /var/cache/salt/minion/doc
		echo "$SLSes" >> $logfile

        if [ -z $Q ]; then # Q stands for quick
          echo "Running sync and patch"
          salt-call -c /root/salt/states/test state.sls test.setup -linfo
          salt-call -c /root/salt/states/test state.sls salt.patch_salt -lerror
        else
          echo "In quick mode, skip running test.setup and patch_salt"
        fi

        salt-call -c /root/salt/states/test state.sls -ldebug $SLSes 2>$errorfile >> $logfile
        echo "============== ERROR LOG ==============" >> $logfile
        cat $errorfile >> $logfile
        rm -f $errorfile
        echo "\nDONE AT `date`" >> $logfile
        xz $logfile
EOF
    echo "Copying log from $address"
    mkdir -p ~/salt_deploy
    scp root@$address:$logfile.xz ~/salt_deploy
    unxz ~/salt_deploy/`basename $logfile`.xz
    vim +/'Result: *False' ~/salt_deploy/`basename $logfile`
    fi
    set +x
}

ldir () {
# get list of changed formulas in comparing to $1 branch
    git diff $1 --stat | grep -v insertions | cut -d'/' -f1 | uniq | xargs
}

mirror () {
    url=$1
    if [ -z $2 ]; then
        expected_fn=$(basename $1)
    else
        expected_fn=$2
    fi
    if [ ! -e $url ]; then
        # it's a url
        fn=$expected_fn
        set -x
        python2 -c "import urllib; print urllib.urlretrieve('"$url"', '"$fn"')"
        set +x
    else
        fn=$url
    fi

    if [ -z $ARCHIVE_SERVER ]; then
        echo -n 'server: '; read server
        echo -n 'dir: '; read destdir
    else
        arrIN=(${ARCHIVE_SERVER//:/ })
        server=${arrIN[0]}
        destdir=${arrIN[1]}
    fi
    scp -v -P22022 $fn salt_archive@${server}:incoming/${destdir}/$expected_fn
}

saltrender () {
    py2
    salt-call --local -c /Users/hvn/FOSS/salt/conf/local  cp.get_template salt://$1 /tmp/salt_render && less /tmp/salt_render
    rm -f /tmp/salt_render
}

# GOWS set to where my Golang code locate
alias vimgo='vim --cmd "cd $GOWS"'
alias vimsalt="vim --cmd 'cd ~/salt'"

# PulseAudio
function vols () {
    pactl list sinks  | grep 'Volume:.*front' | tail -n1 | grep -E '[0-9]+%' -o | head -n1
}
function volj () {
    pactl set-sink-volume 1 -10%; vols
}
function volk () {
    pactl set-sink-volume 1 +10%; vols
}
alias volm='pactl set-sink-volume 1 0%'

# pomodoro
alias lspomo='ps xau | grep pomo'

# projector
alias proj_on='xrandr --output HDMI-1 --mode 1024x768'
alias proj_off='xrandr --output eDP-1'

# wireless
alias fixwifi='sudo modprobe -r b43 && sudo modprobe b43'

# mail
alias mail='mutt -f /var/mail/$USER'

#
alias netbsd='/usr/lib/virtualbox/VBoxHeadless --comment netbsd --startvm 81f6c630-3d76-4971-adb7-3d8d146cc145 --vrde config'

# Ansible helper
alias mkansible='mkdir -p roles/$(basename `pwd`)/{files/,templates/,tasks/,handlers/,vars/,defaults/,meta/}'

## bright
function getdim() {
    cat /sys/class/backlight/intel_backlight/brightness
}
function setdim() {
    getdim
    echo "Enter dim value:"
    read value
    echo $value | sudo tee /sys/class/backlight/intel_backlight/brightness
}

alias dimm='echo 200 | sudo tee /sys/class/backlight/intel_backlight/brightness'
alias dimm='echo 200 | sudo tee /sys/class/backlight/intel_backlight/brightness'
alias dimn='echo 300 | sudo tee /sys/class/backlight/intel_backlight/brightness'
alias dimin='echo 10 | sudo tee /sys/class/backlight/intel_backlight/brightness'
function dimj () {
    echo $(cat /sys/class/backlight/intel_backlight/brightness) - 100 | bc | sudo tee /sys/class/backlight/intel_backlight/brightness
}
function dimk () {
    echo $(cat /sys/class/backlight/intel_backlight/brightness) + 100 | bc | sudo tee /sys/class/backlight/intel_backlight/brightness
}

## always know how many mem that a script uses.
alias python='/usr/bin/time python'

## w3m browser
alias whn='w3m https://news.ycombinator.com/'
alias wddg='w3m https://duckduckgo.com'
alias wdive='w3m file:///usr/share/doc/diveintopython3/html/index.html'

## dict and dictd
function fr() {
  dict --database fd-fra-eng $1
}
function oman() {
    # open online manpage
    w3m "http://manpages.ubuntu.com/cgi-bin/search.py?q=$1&cx=003883529982892832976%3A5zl6o8w6f0s&cof=FORID%3A9&ie=UTF-8&siteurl=manpages.ubuntu.com/manpages/trusty/&ref=manpages.ubuntu.com/&ss=2238j2566274j3"
}
function ddg() {

    w3m "https://duckduckgo.com/?q=$@&t=hf"
}

function godocweb() {
# I dont use godoc CLI, so open web and read the doc
# Use other port than default to not conflict if any other is running
  godoc -http=:16060 &
  if [ "$(uname --kernel-name)" == "Linux" ]; then
      xdg-open 'http://127.0.0.1:16060' &
  else
      echo Non linux
      open http://127.0.0.1:16060
  fi
}

function pinggw() {
    set +x
    gateway=$(ip ro | grep default| cut -d ' ' -f3)
    ping -c 3 $gateway
    nmap -A -T aggressive $gateway  # T4
    nmap -Pn $gateway
}

function loadrc() {
    source ~/.bashrc
}

# auto wrap chicken scheme interpreter
function csi() {
    if command -v rlwrap ; then
        rlwrap csi
    else
        csi
    fi
}

# auto wrap dict output to a pager
function dict() {
    env dict $1 | less
}

# ssh hostname instead of IP
function sshh() {
    hostip=$(echo "$1" | grep -o '\d.*' | sed 's/-/./g')
    echo "SSH to ${hostip} ..."
    shift
    ssh "$hostip" $@
}

# vim dark
alias vimd="vim -c 'set bg=dark'"
## ansible
alias ansiblel="ansible -i 'localhost,' localhost -c local"

alias py3='. ~/py3/bin/activate'

alias uman='docker run -it hvnsweeting/uman man'
alias umanit='docker run -it hvnsweeting/uman'  # uman interactive

alias iml='rlwrap ocaml'

function cl() {
    echo $@ | xclip -sel c
}

function exc() { # HELP: show Elixir code of given func
# because split string to array in bash is crazy https://stackoverflow.com/a/45201229/807703
# usage: exc Enum.reduce
    python3 -c """import sys, os; print(os.system('grep -n -A10 \'^  def {1}\' ~/me/elixir/lib/elixir/lib/{0}.ex'.format(*sys.argv[1].lower().split('.'))))""" $@
}

function workon() { #HELP switch Python virtualenv:\nworkon [env]
    if [ $# -eq 0 ]; then
        for path in ~/.virtualenvs/*/; do
            echo $(basename $path)
        done
    else
        source ~/.virtualenvs/$1/bin/activate
    fi
}

function hhelp() {
    sed -n "s/^.*#HELP\\s//p;" ~/.hvnalias | sed "s/\\\n/\n\t/g;s/$/\n/"
}

alias exi='cd ~/me/explay; iex -S mix'
