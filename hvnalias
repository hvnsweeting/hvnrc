# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias lst='ls -Fhtl'

# frequent
alias psg='ps aux | grep '
alias irc='irssi -c irc.freenode.net'
alias syslog='tail -f /var/log/syslog | ccze'
alias lstd='cat ~/.TODO.rst'
alias vitd='vim ~/.TODO.rst'

alias py2='source ~/python2/bin/activate'
alias ipy='. ~/python2/bin/activate; cd ~/python2/code; ipython'

# cds
alias cdd="cd ~/Dropbox"
alias cdp="cd ~/python2"
alias cdg="cd ~/Github"
alias cdcm='cd ~/Github/bfs/common'
alias cdrc='cd ~/Github/hvnrc'

# netcheck
# TODO test on Linux, add an IP of VN
alias netchk='ping -c2 -W1 203.162.71.66 || ping -c1 -W1 8.8.8.8 || ping -c1 -W1 208.67.222.222 || echo "NO CONNECTION"'

# PyTimesheet
alias pts='/Users/hvn/Github/pytimesheet/pts.py'

# GIT
alias gtus='git status'
alias gcm='git commit -m '
alias gut='git add -u && gcm "update" && pom'
alias gfo='git fetch origin -p'
gfa () {
    current=`pwd`
    if [ -z $1 ]; then
        dest=/home/hvn/Github/bfs/*/
    else
        dest=$1
    fi
    for n in `find $dest -name '.git' -type d `;
    do
        dir=$(echo $n | grep -Eo '.*/')
        cd $dir
        echo "fetching in $(pwd)"
        git fetch origin -p
    done
    cd $current
}

function gpush () {
    files=$(git log -n3 --stat | grep -o '.*\.py')
        for f in $files; do
            if [ -e $f ]; then
                flake8 $f
            fi
        done
    if [ ! -z "$files" ]; then
        echo 'Do you still want to push? [y/n]'
        read answer
        if [ "$answer" = 'y' ]; then
            git push $*
        fi
    fi
}

# Saltstack
alias sls='salt-call --local state.sls'
alias grains='salt-call --local grains.items'
alias bfs='~/Github/tinyscripts/salt/bfs.sh'
alias scl='salt-call --local'
upre() {
    ssh-add; sudo virsh start $1
}

# dangerous alias like for shutting down computer
if [ -f ~/.ugly_aliases ]; then
    . ~/.ugly_aliases
fi

# Arch
alias lsrv='systemctl list-unit-files'

# virsh
alias vst='virsh start'

alias nrpe='~/Github/tinyscripts/salt/nrpe2mon.py'

# Auto deploy salt for test
deps () {
    saltcommon=$1
    address=$2
    SLSes=$3
    salt_common=`pwd`

    if [ ! -e 'nrpe/init.sls' ]; then
        echo "$salt_common"
        echo "It does not look like root salt-common dir. Exit? [y/n]"
        read _cm
        if [ ${_cm} = 'y' ]; then
            return
        fi
    fi

    cd $saltcommon/..
    parent=`pwd`

    cd $parent/pillars
    if [ "$(git rev-parse --abbrev-ref HEAD)" == "develop" ]; then
        echo -n "Pillar is in branch develop, continue? [y/n]:"
        read _answ
        if [ ${_answ} != "y" ]; then
            cd $salt_common
            return
        fi
    fi

    cd $salt_common
    # TODO verify is a salt-common repo
    tarball=/tmp/salt_`date +%Y%m%d_%H%M%S`.tar.gz
    logfile=/var/log/salt/`date +%Y%m%d_%H%M%S_$SLSes.log`
    errorfile=$logfile$$
    if [ ! -z $5 ]; then
        non_common=$5
    else
        non_common=$salt_common
    fi
    set -x
    $saltcommon/bootstrap_archive.py $parent/pillars $non_common > $tarball
    set +x
    tar tzf $tarball 2>&1 > /dev/null || { echo "bad tarball" && return ; }

    set -x
    if [ ! -z $address ]; then
        if ! `scp -v $tarball root@$address:/tmp`; then
            ssh-keygen -f ~/.ssh/known_hosts -R $address
            scp -v -oStrictHostKeyChecking=no $tarball root@$address:/tmp
        fi

        # Prefix existing hostname with integration

        # remove hostname file may chmod 444, cannot override it, so remove it
        if [ -f /tmp/hostname_$$ ]; then
            rm -f /tmp/hostname_$$
        fi

        scp -v root@$address:/etc/hostname /tmp/hostname_$$

        remotehostname=$(cat /tmp/hostname_$$)
        if [ "${remotehostname:0:11}" = 'integration' ]; then
            remotehostname=${remotehostname:11}
        fi

        # run the salt-call
        ssh -oStrictHostKeyChecking=no root@$address << EOF
        cd /; rm -rf /root/salt; tar xzf $tarball;
        pgrep salt-minion || /root/salt/states/salt/minion/bootstrap.sh "integration-$remotehostname"
        echo "log_level: info" > /etc/salt/minion.d/log.conf
        echo "file_log_level: debug" >> /etc/salt/minion.d/log.conf
        service salt-minion restart
        cd /root/salt;
		echo "$SLSes" >> $logfile
        salt-call --local saltutil.sync_all
        salt-call --local state.sls $SLSes 2>$errorfile >> $logfile
        echo "============== ERROR LOG ==============" >> $logfile
        cat $errorfile >> $logfile
        rm $errorfile
        echo "\nDONE AT `date`" >> $logfile
EOF
    test -e ~/salt_deploy || mkdir ~/salt_deploy
    scp -v root@$address:$logfile ~/salt_deploy
    vim +/'Result: *False' ~/salt_deploy/`basename $logfile`
    fi
    set +x
}

alias lint=~/Github/tinyscripts/lint.sh

ldir () {
# get list of changed formulas in comparing to $1 branch
    git diff $1 --stat | grep -v insertions | cut -d'/' -f1 | uniq | xargs
}

mirror () {
    url=$1
    expected_fn=$2
    if [ ! -e $url ]; then
        # it's a url
        fn=$expected_fn
        set -x
        python2 -c "import urllib; print urllib.urlretrieve('"$url"', '"$fn"')"
        set +x
    else
        fn=$url
    fi

    echo -n 'server: '; read server
    echo -n 'dir: '; read destdir
    scp -v -P22022 $fn salt_archive@${server}:incoming/${destdir}/$expected_fn
    rm -i $fn
}

saltrender () {
    py2
    salt-call --local -c /Users/hvn/Github/FOSS/salt/conf  cp.get_template salt://$1 /tmp/salt_render && less /tmp/salt_render
    rm -f /tmp/salt_render
}
